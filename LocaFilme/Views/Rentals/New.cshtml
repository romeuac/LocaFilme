
@{
    ViewBag.Title = "New";
}

<h2>New Rental Form</h2>

@*O HTML FOI CRIADO MAIS FACILMENTE COM AJUDA DO WEB ESSENCIALS 2017 VIDE LINHA ABAIXO
div.form-group>label+input[type='text].form-control
button.btn.btn-primary     APERTAR "TAB" NO FINAL*@

<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" required data-rule-validCutomer="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Movie</label>
        <div class="tt-container">
            <input id="movie" name="movie" data-rule-noChosenMovies="true" type="text" value="" class="form-control" />
        </div>

    <button class="btn btn-primary">Submit</button>

    <div class="row">
        <div class="col-md-4 col-sm-4">
            <ul id="movies" class="list-group"></ul>
        </div>
    </div>

</form>

@section scripts
{
    @*Incluindo Jquery Validation*@
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {

            // Criando um View model para ser retornado
            var vm = {
                MovieIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                    vm.CustomerId = customer.id;
                });



            // MOVIES TYPE AHEAD
            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead(
                {
                    minLength: 3,
                    highlight: true
                },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function (e, movie) {
                    $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");

                    //Apagando a seleção do typeahead
                    $("#movie").typeahead("val", "");

                    // Adicionando o movie aa lista de movies
                    vm.MovieIds.push(movie.id);

                });

            // CUSTOM VALIDATIONs
            $.validator.addMethod("validCutomer", function () {
                return vm.CustomerId && vm.CustomerId !== 0;
            }, "Please select a valid customer.");

            $.validator.addMethod("noChosenMovies", function () {
                return vm.MovieIds.length > 0;
            }, "Please select at least one movie");

            // GENERIC VALIDARION - como a do Required que estah para o campo do customer 
            var validator = $("#newRental").validate({
                submitHandler: function () {
                    // Para nao seguir o procedimento padrao de submissao do Form
                    //e.preventDefault();

                    $.ajax({
                        url: "/api/newRentals",
                        method: "post",
                        data: vm
                    })
                    // Para lidar com SUCCESS and FAILURE
                    .done(function () {
                        //console.log("Done");
                        toastr.success("Rental(s) successfully recorded!");

                        // APAGANDO o form quando estah tudo OK
                        $("#customer").typeahead("val", "");
                        $("#movie").typeahead("val", "");
                        $("#movies").empty();

                        vm = { MovieIds : [] };

                        validator.resetForm();
                    })
                    .fail(function () {
                        toastr.fail("Something unexpected happened..");
                        });

                    // Para impedir a submissao padrao do form
                    return false;
                }                    
            });
        });
    </script>    
}